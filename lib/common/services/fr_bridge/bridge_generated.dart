// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports

import 'dart:convert';
import 'dart:typed_data';

import 'dart:convert';
import 'dart:typed_data';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'dart:ffi' as ffi;

abstract class PeaqCodecApi {
  Future<void> initLogger({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInitLoggerConstMeta;

  Future<void> connectP2P({required String url, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kConnectP2PConstMeta;

  Future<void> disconnectP2P({required String peerId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDisconnectP2PConstMeta;

  Future<Uint8List> sendIdentityChallengeEvent({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSendIdentityChallengeEventConstMeta;

  Future<Uint8List> sendStopChargeEvent({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSendStopChargeEventConstMeta;

  Future<Uint8List> sendServiceRequestedEvent(
      {required String provider,
      required String consumer,
      required String tokenDeposited,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSendServiceRequestedEventConstMeta;

  Future<Uint8List> getAccountBalance(
      {required String wsUrl,
      required String tokenDecimals,
      required String seed,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetAccountBalanceConstMeta;

  Future<Uint8List> generateAccount(
      {required String wsUrl, required String secretPhrase, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGenerateAccountConstMeta;

  Future<Uint8List> createMultisigAddress(
      {required List<String> signatories,
      required int threshold,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCreateMultisigAddressConstMeta;

  Future<Uint8List> approveMultisig(
      {required String wsUrl,
      required int threshold,
      required List<String> otherSignatories,
      required int timepointHeight,
      required int timepointIndex,
      required String callHash,
      required String seed,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kApproveMultisigConstMeta;

  Future<Uint8List> transferFund(
      {required String wsUrl,
      required String address,
      required String amount,
      required String seed,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kTransferFundConstMeta;

  Future<Uint8List> getEvent({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetEventConstMeta;

  Future<Uint8List> verifyPeerDidDocument(
      {required String providerPk, required Uint8List signature, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kVerifyPeerDidDocumentConstMeta;

  Future<Uint8List> verifyPeerIdentity(
      {required String providerPk,
      required String plainData,
      required Uint8List signature,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kVerifyPeerIdentityConstMeta;

  Future<Uint8List> fetchDidDocument(
      {required String wsUrl,
      required String publicKey,
      required String storageName,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFetchDidDocumentConstMeta;
}

class PeaqCodecApiImpl extends FlutterRustBridgeBase<PeaqCodecApiWire>
    implements PeaqCodecApi {
  factory PeaqCodecApiImpl(ffi.DynamicLibrary dylib) =>
      PeaqCodecApiImpl.raw(PeaqCodecApiWire(dylib));

  PeaqCodecApiImpl.raw(PeaqCodecApiWire inner) : super(inner);

  Future<void> initLogger({dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_init_logger(port_),
        parseSuccessData: _wire2api_unit,
        constMeta: kInitLoggerConstMeta,
        argValues: [],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kInitLoggerConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "init_logger",
        argNames: [],
      );

  Future<void> connectP2P({required String url, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) =>
            inner.wire_connect_p2p(port_, _api2wire_String(url)),
        parseSuccessData: _wire2api_unit,
        constMeta: kConnectP2PConstMeta,
        argValues: [url],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kConnectP2PConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "connect_p2p",
        argNames: ["url"],
      );

  Future<void> disconnectP2P({required String peerId, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) =>
            inner.wire_disconnect_p2p(port_, _api2wire_String(peerId)),
        parseSuccessData: _wire2api_unit,
        constMeta: kDisconnectP2PConstMeta,
        argValues: [peerId],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kDisconnectP2PConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "disconnect_p2p",
        argNames: ["peerId"],
      );

  Future<Uint8List> sendIdentityChallengeEvent({dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_send_identity_challenge_event(port_),
        parseSuccessData: _wire2api_uint_8_list,
        constMeta: kSendIdentityChallengeEventConstMeta,
        argValues: [],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kSendIdentityChallengeEventConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "send_identity_challenge_event",
        argNames: [],
      );

  Future<Uint8List> sendStopChargeEvent({dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_send_stop_charge_event(port_),
        parseSuccessData: _wire2api_uint_8_list,
        constMeta: kSendStopChargeEventConstMeta,
        argValues: [],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kSendStopChargeEventConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "send_stop_charge_event",
        argNames: [],
      );

  Future<Uint8List> sendServiceRequestedEvent(
          {required String provider,
          required String consumer,
          required String tokenDeposited,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_send_service_requested_event(
            port_,
            _api2wire_String(provider),
            _api2wire_String(consumer),
            _api2wire_String(tokenDeposited)),
        parseSuccessData: _wire2api_uint_8_list,
        constMeta: kSendServiceRequestedEventConstMeta,
        argValues: [provider, consumer, tokenDeposited],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kSendServiceRequestedEventConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "send_service_requested_event",
        argNames: ["provider", "consumer", "tokenDeposited"],
      );

  Future<Uint8List> getAccountBalance(
          {required String wsUrl,
          required String tokenDecimals,
          required String seed,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_get_account_balance(
            port_,
            _api2wire_String(wsUrl),
            _api2wire_String(tokenDecimals),
            _api2wire_String(seed)),
        parseSuccessData: _wire2api_uint_8_list,
        constMeta: kGetAccountBalanceConstMeta,
        argValues: [wsUrl, tokenDecimals, seed],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGetAccountBalanceConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_account_balance",
        argNames: ["wsUrl", "tokenDecimals", "seed"],
      );

  Future<Uint8List> generateAccount(
          {required String wsUrl,
          required String secretPhrase,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_generate_account(
            port_, _api2wire_String(wsUrl), _api2wire_String(secretPhrase)),
        parseSuccessData: _wire2api_uint_8_list,
        constMeta: kGenerateAccountConstMeta,
        argValues: [wsUrl, secretPhrase],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGenerateAccountConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "generate_account",
        argNames: ["wsUrl", "secretPhrase"],
      );

  Future<Uint8List> createMultisigAddress(
          {required List<String> signatories,
          required int threshold,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_create_multisig_address(
            port_, _api2wire_StringList(signatories), _api2wire_u16(threshold)),
        parseSuccessData: _wire2api_uint_8_list,
        constMeta: kCreateMultisigAddressConstMeta,
        argValues: [signatories, threshold],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kCreateMultisigAddressConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "create_multisig_address",
        argNames: ["signatories", "threshold"],
      );

  Future<Uint8List> approveMultisig(
          {required String wsUrl,
          required int threshold,
          required List<String> otherSignatories,
          required int timepointHeight,
          required int timepointIndex,
          required String callHash,
          required String seed,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_approve_multisig(
            port_,
            _api2wire_String(wsUrl),
            _api2wire_u16(threshold),
            _api2wire_StringList(otherSignatories),
            _api2wire_u32(timepointHeight),
            _api2wire_u32(timepointIndex),
            _api2wire_String(callHash),
            _api2wire_String(seed)),
        parseSuccessData: _wire2api_uint_8_list,
        constMeta: kApproveMultisigConstMeta,
        argValues: [
          wsUrl,
          threshold,
          otherSignatories,
          timepointHeight,
          timepointIndex,
          callHash,
          seed
        ],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kApproveMultisigConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "approve_multisig",
        argNames: [
          "wsUrl",
          "threshold",
          "otherSignatories",
          "timepointHeight",
          "timepointIndex",
          "callHash",
          "seed"
        ],
      );

  Future<Uint8List> transferFund(
          {required String wsUrl,
          required String address,
          required String amount,
          required String seed,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_transfer_fund(
            port_,
            _api2wire_String(wsUrl),
            _api2wire_String(address),
            _api2wire_String(amount),
            _api2wire_String(seed)),
        parseSuccessData: _wire2api_uint_8_list,
        constMeta: kTransferFundConstMeta,
        argValues: [wsUrl, address, amount, seed],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kTransferFundConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "transfer_fund",
        argNames: ["wsUrl", "address", "amount", "seed"],
      );

  Future<Uint8List> getEvent({dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_get_event(port_),
        parseSuccessData: _wire2api_uint_8_list,
        constMeta: kGetEventConstMeta,
        argValues: [],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGetEventConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_event",
        argNames: [],
      );

  Future<Uint8List> verifyPeerDidDocument(
          {required String providerPk,
          required Uint8List signature,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_verify_peer_did_document(port_,
            _api2wire_String(providerPk), _api2wire_uint_8_list(signature)),
        parseSuccessData: _wire2api_uint_8_list,
        constMeta: kVerifyPeerDidDocumentConstMeta,
        argValues: [providerPk, signature],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kVerifyPeerDidDocumentConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "verify_peer_did_document",
        argNames: ["providerPk", "signature"],
      );

  Future<Uint8List> verifyPeerIdentity(
          {required String providerPk,
          required String plainData,
          required Uint8List signature,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_verify_peer_identity(
            port_,
            _api2wire_String(providerPk),
            _api2wire_String(plainData),
            _api2wire_uint_8_list(signature)),
        parseSuccessData: _wire2api_uint_8_list,
        constMeta: kVerifyPeerIdentityConstMeta,
        argValues: [providerPk, plainData, signature],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kVerifyPeerIdentityConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "verify_peer_identity",
        argNames: ["providerPk", "plainData", "signature"],
      );

  Future<Uint8List> fetchDidDocument(
          {required String wsUrl,
          required String publicKey,
          required String storageName,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_fetch_did_document(
            port_,
            _api2wire_String(wsUrl),
            _api2wire_String(publicKey),
            _api2wire_String(storageName)),
        parseSuccessData: _wire2api_uint_8_list,
        constMeta: kFetchDidDocumentConstMeta,
        argValues: [wsUrl, publicKey, storageName],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kFetchDidDocumentConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "fetch_did_document",
        argNames: ["wsUrl", "publicKey", "storageName"],
      );

  // Section: api2wire
  ffi.Pointer<wire_uint_8_list> _api2wire_String(String raw) {
    return _api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  ffi.Pointer<wire_StringList> _api2wire_StringList(List<String> raw) {
    final ans = inner.new_StringList_0(raw.length);
    for (var i = 0; i < raw.length; i++) {
      ans.ref.ptr[i] = _api2wire_String(raw[i]);
    }
    return ans;
  }

  int _api2wire_u16(int raw) {
    return raw;
  }

  int _api2wire_u32(int raw) {
    return raw;
  }

  int _api2wire_u8(int raw) {
    return raw;
  }

  ffi.Pointer<wire_uint_8_list> _api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  // Section: api_fill_to_wire
}

// Section: wire2api
int _wire2api_u8(dynamic raw) {
  return raw as int;
}

Uint8List _wire2api_uint_8_list(dynamic raw) {
  return raw as Uint8List;
}

void _wire2api_unit(dynamic raw) {
  return;
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class PeaqCodecApiWire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  PeaqCodecApiWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  PeaqCodecApiWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void wire_init_logger(
    int port_,
  ) {
    return _wire_init_logger(
      port_,
    );
  }

  late final _wire_init_loggerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_init_logger');
  late final _wire_init_logger =
      _wire_init_loggerPtr.asFunction<void Function(int)>();

  void wire_connect_p2p(
    int port_,
    ffi.Pointer<wire_uint_8_list> url,
  ) {
    return _wire_connect_p2p(
      port_,
      url,
    );
  }

  late final _wire_connect_p2pPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_connect_p2p');
  late final _wire_connect_p2p = _wire_connect_p2pPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_disconnect_p2p(
    int port_,
    ffi.Pointer<wire_uint_8_list> peer_id,
  ) {
    return _wire_disconnect_p2p(
      port_,
      peer_id,
    );
  }

  late final _wire_disconnect_p2pPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_disconnect_p2p');
  late final _wire_disconnect_p2p = _wire_disconnect_p2pPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_send_identity_challenge_event(
    int port_,
  ) {
    return _wire_send_identity_challenge_event(
      port_,
    );
  }

  late final _wire_send_identity_challenge_eventPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_send_identity_challenge_event');
  late final _wire_send_identity_challenge_event =
      _wire_send_identity_challenge_eventPtr.asFunction<void Function(int)>();

  void wire_send_stop_charge_event(
    int port_,
  ) {
    return _wire_send_stop_charge_event(
      port_,
    );
  }

  late final _wire_send_stop_charge_eventPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_send_stop_charge_event');
  late final _wire_send_stop_charge_event =
      _wire_send_stop_charge_eventPtr.asFunction<void Function(int)>();

  void wire_send_service_requested_event(
    int port_,
    ffi.Pointer<wire_uint_8_list> provider,
    ffi.Pointer<wire_uint_8_list> consumer,
    ffi.Pointer<wire_uint_8_list> token_deposited,
  ) {
    return _wire_send_service_requested_event(
      port_,
      provider,
      consumer,
      token_deposited,
    );
  }

  late final _wire_send_service_requested_eventPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_send_service_requested_event');
  late final _wire_send_service_requested_event =
      _wire_send_service_requested_eventPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_account_balance(
    int port_,
    ffi.Pointer<wire_uint_8_list> ws_url,
    ffi.Pointer<wire_uint_8_list> token_decimals,
    ffi.Pointer<wire_uint_8_list> seed,
  ) {
    return _wire_get_account_balance(
      port_,
      ws_url,
      token_decimals,
      seed,
    );
  }

  late final _wire_get_account_balancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_get_account_balance');
  late final _wire_get_account_balance =
      _wire_get_account_balancePtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_generate_account(
    int port_,
    ffi.Pointer<wire_uint_8_list> ws_url,
    ffi.Pointer<wire_uint_8_list> secret_phrase,
  ) {
    return _wire_generate_account(
      port_,
      ws_url,
      secret_phrase,
    );
  }

  late final _wire_generate_accountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_generate_account');
  late final _wire_generate_account = _wire_generate_accountPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_create_multisig_address(
    int port_,
    ffi.Pointer<wire_StringList> signatories,
    int threshold,
  ) {
    return _wire_create_multisig_address(
      port_,
      signatories,
      threshold,
    );
  }

  late final _wire_create_multisig_addressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_StringList>,
              ffi.Uint16)>>('wire_create_multisig_address');
  late final _wire_create_multisig_address = _wire_create_multisig_addressPtr
      .asFunction<void Function(int, ffi.Pointer<wire_StringList>, int)>();

  void wire_approve_multisig(
    int port_,
    ffi.Pointer<wire_uint_8_list> ws_url,
    int threshold,
    ffi.Pointer<wire_StringList> other_signatories,
    int timepoint_height,
    int timepoint_index,
    ffi.Pointer<wire_uint_8_list> call_hash,
    ffi.Pointer<wire_uint_8_list> seed,
  ) {
    return _wire_approve_multisig(
      port_,
      ws_url,
      threshold,
      other_signatories,
      timepoint_height,
      timepoint_index,
      call_hash,
      seed,
    );
  }

  late final _wire_approve_multisigPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Uint16,
              ffi.Pointer<wire_StringList>,
              ffi.Uint32,
              ffi.Uint32,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_approve_multisig');
  late final _wire_approve_multisig = _wire_approve_multisigPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          int,
          ffi.Pointer<wire_StringList>,
          int,
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_transfer_fund(
    int port_,
    ffi.Pointer<wire_uint_8_list> ws_url,
    ffi.Pointer<wire_uint_8_list> address,
    ffi.Pointer<wire_uint_8_list> amount,
    ffi.Pointer<wire_uint_8_list> seed,
  ) {
    return _wire_transfer_fund(
      port_,
      ws_url,
      address,
      amount,
      seed,
    );
  }

  late final _wire_transfer_fundPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_transfer_fund');
  late final _wire_transfer_fund = _wire_transfer_fundPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_event(
    int port_,
  ) {
    return _wire_get_event(
      port_,
    );
  }

  late final _wire_get_eventPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_get_event');
  late final _wire_get_event =
      _wire_get_eventPtr.asFunction<void Function(int)>();

  void wire_verify_peer_did_document(
    int port_,
    ffi.Pointer<wire_uint_8_list> provider_pk,
    ffi.Pointer<wire_uint_8_list> signature,
  ) {
    return _wire_verify_peer_did_document(
      port_,
      provider_pk,
      signature,
    );
  }

  late final _wire_verify_peer_did_documentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_verify_peer_did_document');
  late final _wire_verify_peer_did_document =
      _wire_verify_peer_did_documentPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_verify_peer_identity(
    int port_,
    ffi.Pointer<wire_uint_8_list> provider_pk,
    ffi.Pointer<wire_uint_8_list> plain_data,
    ffi.Pointer<wire_uint_8_list> signature,
  ) {
    return _wire_verify_peer_identity(
      port_,
      provider_pk,
      plain_data,
      signature,
    );
  }

  late final _wire_verify_peer_identityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_verify_peer_identity');
  late final _wire_verify_peer_identity =
      _wire_verify_peer_identityPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_fetch_did_document(
    int port_,
    ffi.Pointer<wire_uint_8_list> ws_url,
    ffi.Pointer<wire_uint_8_list> public_key,
    ffi.Pointer<wire_uint_8_list> storage_name,
  ) {
    return _wire_fetch_did_document(
      port_,
      ws_url,
      public_key,
      storage_name,
    );
  }

  late final _wire_fetch_did_documentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_fetch_did_document');
  late final _wire_fetch_did_document = _wire_fetch_did_documentPtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  ffi.Pointer<wire_StringList> new_StringList_0(
    int len,
  ) {
    return _new_StringList_0(
      len,
    );
  }

  late final _new_StringList_0Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_StringList> Function(ffi.Int32)>>(
      'new_StringList_0');
  late final _new_StringList_0 = _new_StringList_0Ptr
      .asFunction<ffi.Pointer<wire_StringList> Function(int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>(
          'free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct = _free_WireSyncReturnStructPtr
      .asFunction<void Function(WireSyncReturnStruct)>();

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();
}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

class wire_StringList extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<wire_uint_8_list>> ptr;

  @ffi.Int32()
  external int len;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
